package handlers

import (
	"fmt"
	"log"
	"net/http"
	"strconv"
	"strings"
	"time"

	"github.com/UAssylbek/central-reporting/internal/models"
	"github.com/UAssylbek/central-reporting/internal/repositories"
	"github.com/gin-gonic/gin"
)

const (
	errInvalidUserID      = "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
	errNoAccess           = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
	errUserAlreadyExists  = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ª–æ–≥–∏–Ω–æ–º '%s' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
	errFailedToGetUsers   = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
	errFailedToCreateUser = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
	errFailedToUpdateUser = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
	errFailedToDeleteUser = "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
	errUserNotFound       = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
	errCannotDeleteSelf   = "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è"
)

func (h *UserHandler) GetUserByID(c *gin.Context) {
	h.GetUser(c)
}

type UserHandler struct {
	userRepo *repositories.UserRepository
}

func NewUserHandler(userRepo *repositories.UserRepository) *UserHandler {
	return &UserHandler{userRepo: userRepo}
}

func (h *UserHandler) GetUsers(c *gin.Context) {
	log.Println("GetUsers handler called")

	role, _ := c.Get("role")
	userID, _ := c.Get("user_id")

	var users []models.User
	var err error

	// –ï—Å–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	if role == models.RoleModerator {
		log.Printf("Moderator %d requesting accessible users", userID.(int))
		users, err = h.userRepo.GetAccessibleUsers(userID.(int))
	} else {
		// –î–ª—è –∞–¥–º–∏–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
		users, err = h.userRepo.GetAll()
	}

	if err != nil {
		log.Printf("Error in GetUsers handler: %v", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"})
		return
	}

	log.Printf("Found %d users", len(users))
	c.JSON(http.StatusOK, gin.H{"users": users})
}

func (h *UserHandler) GetUser(c *gin.Context) {
	idStr := c.Param("id")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
		return
	}

	role, _ := c.Get("role")
	userID, _ := c.Get("user_id")

	// –ï—Å–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
	if role == models.RoleModerator {
		canAccess, err := h.userRepo.CanModeratorAccessUser(userID.(int), id)
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞"})
			return
		}
		if !canAccess {
			c.JSON(http.StatusForbidden, gin.H{"error": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"})
			return
		}
	}

	user, err := h.userRepo.GetByID(id)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"user": user})
}

// CreateUser —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *UserHandler) CreateUser(c *gin.Context) {
	var req models.CreateUserRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	role, _ := c.Get("role")
	currentUserID, _ := c.Get("user_id")

	if role != models.RoleAdmin {
		c.JSON(http.StatusForbidden, gin.H{
			"error": "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
		})
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	existingUser, _ := h.userRepo.GetByUsername(req.Username)
	if existingUser != nil {
		c.JSON(http.StatusConflict, gin.H{
			"error": fmt.Sprintf(errUserAlreadyExists, req.Username),
		})
		return
	}

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è NullString
	createNullString := func(s string) models.NullString {
		return models.NullString{
			String: s,
			Valid:  s != "",
		}
	}

	// –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
	var birthDate models.NullTime
	if req.BirthDate != "" {
		parsedDate, err := time.Parse("2006-01-02", req.BirthDate)
		if err == nil {
			birthDate = models.NullTime{Time: parsedDate, Valid: true}
		}
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤—ã –µ—Å–ª–∏ –æ–Ω–∏ nil
	if req.Emails == nil {
		req.Emails = []string{}
	}
	if req.Phones == nil {
		req.Phones = []string{}
	}
	if req.Tags == nil {
		req.Tags = []string{}
	}
	if req.CustomFields == nil {
		req.CustomFields = models.CustomFields{}
	}

	user := models.User{
		FullName:               req.FullName,
		Username:               req.Username,
		Password:               createNullString(req.Password),
		AvatarURL:              createNullString(req.AvatarURL),
		RequirePasswordChange:  req.RequirePasswordChange,
		DisablePasswordChange:  req.DisablePasswordChange,
		ShowInSelection:        req.ShowInSelection,
		AvailableOrganizations: req.AvailableOrganizations,
		AccessibleUsers:        req.AccessibleUsers,
		Emails:                 models.Emails(req.Emails),
		Phones:                 models.Phones(req.Phones),
		Position:               createNullString(req.Position),
		Department:             createNullString(req.Department),
		BirthDate:              birthDate,
		Address:                createNullString(req.Address),
		City:                   createNullString(req.City),
		Country:                createNullString(req.Country),
		PostalCode:             createNullString(req.PostalCode),
		SocialLinks:            req.SocialLinks,
		Timezone:               createNullString(req.Timezone),
		WorkHours:              createNullString(req.WorkHours),
		Comment:                createNullString(req.Comment),
		CustomFields:           req.CustomFields,
		Tags:                   models.Tags(req.Tags),
		IsActive:               true,
		Role:                   req.Role,
		IsFirstLogin:           true,
		CreatedBy:              models.NullInt{Int: currentUserID.(int), Valid: true},
	}

	// –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ –∑–∞–¥–∞–Ω, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –µ–≥–æ —Å–º–µ–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ
	if !user.Password.Valid && user.RequirePasswordChange {
		user.IsFirstLogin = true
	}

	if err := h.userRepo.Create(&user); err != nil {
		log.Printf("Failed to create user: %v", err)
		if strings.Contains(err.Error(), "duplicate") || strings.Contains(err.Error(), "unique") {
			c.JSON(http.StatusConflict, gin.H{
				"error": fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ª–æ–≥–∏–Ω–æ–º '%s' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", req.Username),
			})
		} else {
			c.JSON(http.StatusInternalServerError, gin.H{
				"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
			})
		}
		return
	}

	// –û—á–∏—â–∞–µ–º –ø–∞—Ä–æ–ª—å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
	user.Password = models.NullString{}
	c.JSON(http.StatusCreated, gin.H{"user": user})
}

// UpdateUser –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *UserHandler) UpdateUser(c *gin.Context) {
	idStr := c.Param("id")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": errInvalidUserID})
		return
	}

	var req models.UpdateUserRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	role, _ := c.Get("role")
	userID, _ := c.Get("user_id")
	currentUserID := userID.(int)

	// üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–º–µ–µ—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
	if role == models.RoleAdmin {
		// –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª—é–±–æ–≥–æ, –≤–∫–ª—é—á–∞—è —Å–µ–±—è
		// –ù–∏–∫–∞–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
	} else if role == models.RoleModerator {
		// üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±—è –∏–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
		if currentUserID == id {
			// –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–µ–±—è - —Ä–∞–∑—Ä–µ—à–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
			// –ù–æ –ù–ï —Ä–∞–∑—Ä–µ—à–∞–µ–º –º–µ–Ω—è—Ç—å —Ä–æ–ª—å, username, password, organizations
			if req.Role != "" {
				c.JSON(http.StatusForbidden, gin.H{"error": "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å —Å–≤–æ—é —Ä–æ–ª—å"})
				return
			}
			if req.Username != "" {
				c.JSON(http.StatusForbidden, gin.H{"error": "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å —Å–≤–æ–π –ª–æ–≥–∏–Ω"})
				return
			}
			if req.Password != "" {
				c.JSON(http.StatusForbidden, gin.H{"error": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ–æ—Ä–º—É –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è"})
				return
			}
		} else {
			// –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
			canAccess, err := h.userRepo.CanModeratorAccessUser(currentUserID, id)
			if err != nil || !canAccess {
				c.JSON(http.StatusForbidden, gin.H{"error": errNoAccess})
				return
			}

			// –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –¢–û–õ–¨–ö–û available_organizations —É —Å–≤–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
			// –û—á–∏—â–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
			req = models.UpdateUserRequest{
				AvailableOrganizations: req.AvailableOrganizations,
			}
		}
	} else if role == models.RoleUser {
		// üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–µ–±—è
		if currentUserID != id {
			c.JSON(http.StatusForbidden, gin.H{"error": errNoAccess})
			return
		}

		// User –ù–ï –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å: —Ä–æ–ª—å, username, password, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
		if req.Role != "" {
			c.JSON(http.StatusForbidden, gin.H{"error": "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å —Å–≤–æ—é —Ä–æ–ª—å"})
			return
		}
		if req.Username != "" {
			c.JSON(http.StatusForbidden, gin.H{"error": "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å —Å–≤–æ–π –ª–æ–≥–∏–Ω"})
			return
		}
		if req.Password != "" {
			c.JSON(http.StatusForbidden, gin.H{"error": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ–æ—Ä–º—É –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è"})
			return
		}
		if len(req.AvailableOrganizations) > 0 {
			c.JSON(http.StatusForbidden, gin.H{"error": "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"})
			return
		}
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º username (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ username –º–µ–Ω—è–µ—Ç—Å—è)
	if req.Username != "" {
		existingUser, _ := h.userRepo.GetByUsername(req.Username)
		if existingUser != nil && existingUser.ID != id {
			c.JSON(http.StatusConflict, gin.H{
				"error": fmt.Sprintf(errUserAlreadyExists, req.Username),
			})
			return
		}
	}

	// –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
	if err := h.userRepo.Update(id, req, currentUserID); err != nil {
		log.Printf("Failed to update user %d: %v", id, err)
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": errFailedToUpdateUser,
		})
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	updatedUser, err := h.userRepo.GetByID(id)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
		})
		return
	}

	// –û—á–∏—â–∞–µ–º –ø–∞—Ä–æ–ª—å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
	updatedUser.Password = models.NullString{}
	c.JSON(http.StatusOK, gin.H{"user": updatedUser})
}

func (h *UserHandler) DeleteUser(c *gin.Context) {
	idStr := c.Param("id")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
		return
	}

	role, _ := c.Get("role")
	userID, _ := c.Get("user_id")

	// –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	if role == models.RoleModerator {
		c.JSON(http.StatusForbidden, gin.H{"error": "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"})
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º —Å–µ–±—è
	if userID.(int) == id {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è"})
		return
	}

	if err := h.userRepo.Delete(id); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"})
}

func (h *UserHandler) GetOrganizations(c *gin.Context) {
	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∏–∑ –ë–î
	// –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
	organizations := []gin.H{
		{"id": 1, "name": "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"},
		{"id": 2, "name": "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"},
		{"id": 3, "name": "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤"},
		{"id": 4, "name": "–ê–∫–∏–º–∞—Ç –ê–ª–º–∞—Ç—ã"},
		{"id": 5, "name": "–ê–∫–∏–º–∞—Ç –ê—Å—Ç–∞–Ω—ã"},
	}

	c.JSON(http.StatusOK, gin.H{"organizations": organizations})
}
