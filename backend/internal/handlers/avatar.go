package handlers

import (
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"strconv"
	"strings"

	"github.com/UAssylbek/central-reporting/internal/models"
	"github.com/UAssylbek/central-reporting/internal/repositories"
	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
)

const (
	MaxAvatarSize = 5 << 20 // 5MB
	AvatarDir     = "./uploads/avatars"
)

// –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ MIME —Ç–∏–ø—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
var allowedMIMETypes = map[string]bool{
	"image/jpeg": true,
	"image/png":  true,
	"image/gif":  true,
	"image/webp": true,
}

// –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
var allowedExtensions = map[string]bool{
	".jpg":  true,
	".jpeg": true,
	".png":  true,
	".gif":  true,
	".webp": true,
}

type AvatarHandler struct {
	userRepo *repositories.UserRepository
}

func NewAvatarHandler(userRepo *repositories.UserRepository) *AvatarHandler {
	// –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–∫ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
	os.MkdirAll(AvatarDir, 0755)
	return &AvatarHandler{userRepo: userRepo}
}

// UploadAvatar –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *AvatarHandler) UploadAvatar(c *gin.Context) {
	idStr := c.Param("id")
	userID, err := strconv.Atoi(idStr)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
		return
	}

	currentUserID, _ := c.Get("user_id")
	role, _ := c.Get("role")

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
	if role == models.RoleAdmin {
		// –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å –∞–≤–∞—Ç–∞—Ä –¥–ª—è –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
	} else if currentUserID.(int) != userID {
		// –ù–µ –∞–¥–º–∏–Ω –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		c.JSON(http.StatusForbidden, gin.H{
			"error": "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –∞–≤–∞—Ç–∞—Ä",
		})
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
	file, header, err := c.Request.FormFile("avatar")
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}
	defer file.Close()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
	if header.Size > MaxAvatarSize {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 5MB"})
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –Ω–∞ 0 (–ø—É—Å—Ç–æ–π —Ñ–∞–π–ª)
	if header.Size == 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–§–∞–π–ª –ø—É—Å—Ç"})
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
	contentType := header.Header.Get("Content-Type")
	if !allowedMIMETypes[contentType] {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ: JPEG, PNG, GIF, WebP",
		})
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
	ext := strings.ToLower(filepath.Ext(header.Filename))
	if !allowedExtensions[ext] {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ: .jpg, .jpeg, .png, .gif, .webp",
		})
		return
	}

	// –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 512 –±–∞–π—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ MIME —Ç–∏–ø–∞
	buffer := make([]byte, 512)
	n, err := file.Read(buffer)
	if err != nil && err != io.EOF {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª"})
		return
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
	detectedType := http.DetectContentType(buffer[:n])
	if !allowedMIMETypes[detectedType] {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.",
		})
		return
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
	if _, err := file.Seek(0, 0); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞"})
		return
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ (—Ç–æ–ª—å–∫–æ –∏–º—è, –±–µ–∑ –ø—É—Ç–∏)
	filename := fmt.Sprintf("%d_%s%s", userID, uuid.New().String(), ext)

	// –ó–∞—â–∏—Ç–∞ –æ—Ç directory traversal - –æ—á–∏—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
	filename = filepath.Base(filename)

	// –°–æ–∑–¥–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
	absAvatarDir, err := filepath.Abs(AvatarDir)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞"})
		return
	}

	filePath := filepath.Join(absAvatarDir, filename)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Ç–æ–≥–æ–≤—ã–π –ø—É—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ AvatarDir (–∑–∞—â–∏—Ç–∞ –æ—Ç directory traversal)
	if !strings.HasPrefix(filePath, absAvatarDir) {
		log.Printf("Security: Directory traversal attempt detected. Path: %s", filePath)
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞"})
		return
	}

	// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∞–≤–∞—Ç–∞—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
	user, err := h.userRepo.GetByID(userID)
	if err == nil && user.AvatarURL.Valid && user.AvatarURL.String != "" {
		oldPath := strings.TrimPrefix(user.AvatarURL.String, "/uploads/avatars/")
		os.Remove(filepath.Join(AvatarDir, oldPath))
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞ (0644 = rw-r--r--)
	dst, err := os.OpenFile(filePath, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
	if err != nil {
		log.Printf("Failed to create avatar file: %v", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª"})
		return
	}
	defer dst.Close()

	// –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞)
	written, err := io.CopyN(dst, file, MaxAvatarSize+1)
	if err != nil && err != io.EOF {
		log.Printf("Failed to save avatar: %v", err)
		os.Remove(filePath) // –£–¥–∞–ª—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª"})
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
	if written > MaxAvatarSize {
		os.Remove(filePath)
		c.JSON(http.StatusBadRequest, gin.H{"error": "–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ª–∏–º–∏—Ç"})
		return
	}

	// üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å—Ç—Ä–æ–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ
	avatarURL := fmt.Sprintf("/uploads/avatars/%s", filename)
	updateReq := models.UpdateUserRequest{
		AvatarURL: &avatarURL, // ‚úÖ –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
	}

	if err := h.userRepo.Update(userID, updateReq, currentUserID.(int)); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"avatar_url": avatarURL})
}

// DeleteAvatar —É–¥–∞–ª—è–µ—Ç –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *AvatarHandler) DeleteAvatar(c *gin.Context) {
	idStr := c.Param("id")
	userID, err := strconv.Atoi(idStr)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
		return
	}

	currentUserID, _ := c.Get("user_id")
	role, _ := c.Get("role")

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
	if role == models.RoleAdmin {
		// –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–≤–∞—Ç–∞—Ä –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
	} else if currentUserID.(int) != userID {
		// –ù–µ –∞–¥–º–∏–Ω –ø—ã—Ç–∞–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		c.JSON(http.StatusForbidden, gin.H{
			"error": "–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –∞–≤–∞—Ç–∞—Ä",
		})
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := h.userRepo.GetByID(userID)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}

	// –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
	if user.AvatarURL.Valid && user.AvatarURL.String != "" {
		oldPath := strings.TrimPrefix(user.AvatarURL.String, "/uploads/avatars/")
		filePath := filepath.Join(AvatarDir, oldPath)
		if err := os.Remove(filePath); err != nil {
			log.Printf("Warning: failed to remove avatar file %s: %v", filePath, err)
			// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —É–¥–∞–ª–∏–ª—Å—è
		}
	}

	// üîß –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø–µ—Ä–µ–¥–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
	emptyString := ""
	updateReq := models.UpdateUserRequest{
		AvatarURL: &emptyString, // –¢–µ–ø–µ—Ä—å —ç—Ç–æ —É–∫–∞–∑–∞—Ç–µ–ª—å!
	}

	if err := h.userRepo.Update(userID, updateReq, currentUserID.(int)); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "–ê–≤–∞—Ç–∞—Ä —É–¥–∞–ª—ë–Ω"})
}
