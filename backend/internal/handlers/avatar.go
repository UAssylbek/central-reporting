package handlers

import (
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"strconv"
	"strings"

	"github.com/UAssylbek/central-reporting/internal/models"
	"github.com/UAssylbek/central-reporting/internal/repositories"
	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
)

const (
	MaxAvatarSize = 5 << 20 // 5MB
	AvatarDir     = "./uploads/avatars"
)

type AvatarHandler struct {
	userRepo *repositories.UserRepository
}

func NewAvatarHandler(userRepo *repositories.UserRepository) *AvatarHandler {
	// –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–∫ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
	os.MkdirAll(AvatarDir, 0755)
	return &AvatarHandler{userRepo: userRepo}
}

// UploadAvatar –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *AvatarHandler) UploadAvatar(c *gin.Context) {
	idStr := c.Param("id")
	userID, err := strconv.Atoi(idStr)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
		return
	}

	currentUserID, _ := c.Get("user_id")
	role, _ := c.Get("role")

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
	if role == models.RoleModerator {
		canAccess, err := h.userRepo.CanModeratorAccessUser(currentUserID.(int), userID)
		if err != nil || !canAccess {
			c.JSON(http.StatusForbidden, gin.H{"error": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"})
			return
		}
	} else if role == models.RoleUser && currentUserID.(int) != userID {
		c.JSON(http.StatusForbidden, gin.H{"error": "–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –∞–≤–∞—Ç–∞—Ä"})
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
	file, header, err := c.Request.FormFile("avatar")
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}
	defer file.Close()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
	if header.Size > MaxAvatarSize {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 5MB"})
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
	contentType := header.Header.Get("Content-Type")
	if !strings.HasPrefix(contentType, "image/") {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"})
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
	ext := filepath.Ext(header.Filename)
	if ext == "" {
		ext = ".jpg"
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
	filename := fmt.Sprintf("%d_%s%s", userID, uuid.New().String(), ext)
	filePath := filepath.Join(AvatarDir, filename)

	// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∞–≤–∞—Ç–∞—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
	user, err := h.userRepo.GetByID(userID)
	if err == nil && user.AvatarURL.Valid && user.AvatarURL.String != "" {
		oldPath := strings.TrimPrefix(user.AvatarURL.String, "/uploads/avatars/")
		os.Remove(filepath.Join(AvatarDir, oldPath))
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
	dst, err := os.Create(filePath)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª"})
		return
	}
	defer dst.Close()

	if _, err := io.Copy(dst, file); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª"})
		return
	}

	// üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å—Ç—Ä–æ–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ
	avatarURL := fmt.Sprintf("/uploads/avatars/%s", filename)
	updateReq := models.UpdateUserRequest{
		AvatarURL: &avatarURL, // ‚úÖ –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
	}

	if err := h.userRepo.Update(userID, updateReq, currentUserID.(int)); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"avatar_url": avatarURL})
}

// DeleteAvatar —É–¥–∞–ª—è–µ—Ç –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *AvatarHandler) DeleteAvatar(c *gin.Context) {
	idStr := c.Param("id")
	userID, err := strconv.Atoi(idStr)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
		return
	}

	currentUserID, _ := c.Get("user_id")
	role, _ := c.Get("role")

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
	if role == models.RoleModerator {
		canAccess, err := h.userRepo.CanModeratorAccessUser(currentUserID.(int), userID)
		if err != nil || !canAccess {
			c.JSON(http.StatusForbidden, gin.H{"error": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"})
			return
		}
	} else if role == models.RoleUser && currentUserID.(int) != userID {
		c.JSON(http.StatusForbidden, gin.H{"error": "–ú–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –∞–≤–∞—Ç–∞—Ä"})
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := h.userRepo.GetByID(userID)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}

	// –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
	if user.AvatarURL.Valid && user.AvatarURL.String != "" {
		oldPath := strings.TrimPrefix(user.AvatarURL.String, "/uploads/avatars/")
		filePath := filepath.Join(AvatarDir, oldPath)
		if err := os.Remove(filePath); err != nil {
			log.Printf("Warning: failed to remove avatar file %s: %v", filePath, err)
			// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —É–¥–∞–ª–∏–ª—Å—è
		}
	}

	// üîß –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø–µ—Ä–µ–¥–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
	emptyString := ""
	updateReq := models.UpdateUserRequest{
		AvatarURL: &emptyString, // –¢–µ–ø–µ—Ä—å —ç—Ç–æ —É–∫–∞–∑–∞—Ç–µ–ª—å!
	}

	if err := h.userRepo.Update(userID, updateReq, currentUserID.(int)); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "–ê–≤–∞—Ç–∞—Ä —É–¥–∞–ª—ë–Ω"})
}
