// frontend/src/shared/utils/logger.ts

/**
 * –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —É—Ä–æ–≤–Ω–µ–π
 *
 * –í development —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –ª–æ–≥–∏
 * –í production —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ warn –∏ error
 */

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const isDevelopment = import.meta.env.DEV;

/**
 * –£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export enum LogLevel {
  DEBUG = 'DEBUG',
  INFO = 'INFO',
  WARN = 'WARN',
  ERROR = 'ERROR',
}

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
 */
const getTimestamp = (): string => {
  const now = new Date();
  return now.toLocaleTimeString('ru-RU', {
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit',
    fractionalSecondDigits: 3,
  });
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–æ–≥–∞
 */
const formatMessage = (level: LogLevel, ...args: unknown[]): unknown[] => {
  const timestamp = getTimestamp();
  const prefix = `[${timestamp}] [${level}]`;
  return [prefix, ...args];
};

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç logger
 */
export const logger = {
  /**
   * Debug - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –≤ development
   *
   * @example
   * logger.debug("User data:", user);
   * logger.debug("üîÑ Updating user", id);
   */
  debug: (...args: unknown[]): void => {
    if (isDevelopment) {
      console.log(...formatMessage(LogLevel.DEBUG, ...args));
    }
  },

  /**
   * Info - –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –≤ development
   *
   * @example
   * logger.info("‚úÖ User logged in successfully");
   * logger.info("üì§ Sending request to API");
   */
  info: (...args: unknown[]): void => {
    if (isDevelopment) {
      console.info(...formatMessage(LogLevel.INFO, ...args));
    }
  },

  /**
   * Warn - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –í–°–ï–ì–î–ê (–∏ –≤ dev, –∏ –≤ production)
   *
   * @example
   * logger.warn("Unexpected response format:", response);
   * logger.warn("‚ö†Ô∏è Missing user email");
   */
  warn: (...args: unknown[]): void => {
    console.warn(...formatMessage(LogLevel.WARN, ...args));
  },

  /**
   * Error - –æ—à–∏–±–∫–∏ —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –í–°–ï–ì–î–ê (–∏ –≤ dev, –∏ –≤ production)
   *
   * @example
   * logger.error("‚ùå Failed to upload avatar:", error);
   * logger.error("API request failed:", err.message);
   */
  error: (...args: unknown[]): void => {
    console.error(...formatMessage(LogLevel.ERROR, ...args));
  },

  /**
   * Group - –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ª–æ–≥–∏
   * –†–∞–±–æ—Ç–∞–µ—Ç –¢–û–õ–¨–ö–û –≤ development
   *
   * @example
   * logger.group("User Update Process");
   * logger.debug("Step 1: Validate data");
   * logger.debug("Step 2: Send to API");
   * logger.groupEnd();
   */
  group: (label: string): void => {
    if (isDevelopment) {
      console.group(`[${getTimestamp()}] ${label}`);
    }
  },

  groupCollapsed: (label: string): void => {
    if (isDevelopment) {
      console.groupCollapsed(`[${getTimestamp()}] ${label}`);
    }
  },

  groupEnd: (): void => {
    if (isDevelopment) {
      console.groupEnd();
    }
  },

  /**
   * Table - –≤—ã–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
   * –†–∞–±–æ—Ç–∞–µ—Ç –¢–û–õ–¨–ö–û –≤ development
   *
   * @example
   * logger.table(users);
   */
  table: (data: unknown): void => {
    if (isDevelopment) {
      console.table(data);
    }
  },

  /**
   * Time - –∑–∞–º–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
   * –†–∞–±–æ—Ç–∞–µ—Ç –¢–û–õ–¨–ö–û –≤ development
   *
   * @example
   * logger.time("API Request");
   * await api.getUsers();
   * logger.timeEnd("API Request"); // API Request: 234.56ms
   */
  time: (label: string): void => {
    if (isDevelopment) {
      console.time(label);
    }
  },

  timeEnd: (label: string): void => {
    if (isDevelopment) {
      console.timeEnd(label);
    }
  },
};

/**
 * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–∫–∂–µ isDevelopment –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
 */
export { isDevelopment };
