/**
 * API –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 *
 * –û–ø–∏—Å–∞–Ω–∏–µ:
 * - –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 * - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∏ –ø–æ–∏—Å–∫
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞–º–∏ (–∑–∞–≥—Ä—É–∑–∫–∞/—É–¥–∞–ª–µ–Ω–∏–µ)
 * - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
 *
 * –û—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:
 * - GET /users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 * - GET /users/:id - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
 * - POST /users - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * - PUT /users/:id - –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * - DELETE /users/:id - —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * - POST /users/:id/avatar - –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä
 * - DELETE /users/:id/avatar - —É–¥–∞–ª–∏—Ç—å –∞–≤–∞—Ç–∞—Ä
 * - GET /users/organizations - —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
 *
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤:
 * - UsersPage - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 * - UserFormModal - —Å–æ–∑–¥–∞–Ω–∏–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * - ProfilePage - –ø—Ä–æ—Å–º–æ—Ç—Ä/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
 * - useUsers hooks - React Query –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
 *
 * @module shared/api/users.api
 */

import type { User, UserRole, SocialLinks } from "./auth.api";
import { apiClient } from "./client";
import type {
  PaginationParams,
  PaginatedResponse,
  UserListItem,
} from "./types";
import { buildQueryParams } from "./types";
import { logger } from "../utils/logger";

export interface Organization {
  id: number;
  name: string;
  code?: string;
  description?: string;
}

export interface CreateUserRequest {
  full_name: string;
  username: string;
  password?: string;
  avatar_url?: string;
  require_password_change: boolean;
  disable_password_change: boolean;
  show_in_selection: boolean;
  available_organizations: number[];
  accessible_users: number[];
  emails: string[];
  phones: string[];
  position?: string;
  department?: string;
  birth_date?: string;
  address?: string;
  city?: string;
  country?: string;
  postal_code?: string;
  social_links: SocialLinks;
  timezone?: string;
  work_hours?: string;
  comment?: string;
  custom_fields: Record<string, unknown>;
  tags: string[];
  role: UserRole;
}

export interface UpdateUserRequest {
  full_name?: string;
  username?: string;
  password?: string;
  avatar_url?: string | null;
  reset_password?: boolean;
  require_password_change?: boolean;
  disable_password_change?: boolean;
  show_in_selection?: boolean;
  available_organizations?: number[];
  accessible_users?: number[];
  emails?: string[];
  phones?: string[];
  position?: string;
  department?: string;
  birth_date?: string;
  address?: string;
  city?: string;
  country?: string;
  postal_code?: string;
  social_links?: SocialLinks;
  timezone?: string;
  work_hours?: string;
  comment?: string;
  custom_fields?: Record<string, unknown>;
  tags?: string[];
  is_active?: boolean;
  blocked_reason?: string;
  role?: UserRole;
}

export const usersApi = {
  async deleteUser(id: number): Promise<void> {
    await apiClient.delete<void>(`/users/${id}`);
  },

  async delete(id: number): Promise<void> {
    await apiClient.delete<void>(`/users/${id}`);
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ–±–ª–µ–≥—á–µ–Ω–Ω—ã–π)
   * @param params - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
   * @returns –ü–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å UserListItem
   */
  async getUsers(params?: PaginationParams): Promise<PaginatedResponse<UserListItem>> {
    const queryString = params ? buildQueryParams(params) : '';
    const response = await apiClient.get<PaginatedResponse<UserListItem>>(`/users${queryString}`);
    return response;
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ getUsers() —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
   *
   * Backend –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã User
   */
  async getAll(): Promise<User[]> {
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º endpoint –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const response = await apiClient.get<{ users: User[]; total?: number }>('/users');

    // Backend –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç { users: User[], total?: number, ... }
    if (response.users && Array.isArray(response.users)) {
      return response.users;
    }

    // Fallback - –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    logger.warn('Unexpected API response format:', response);
    return [];
  },

  async getById(id: number): Promise<User> {
    const response = await apiClient.get<{ user: User }>(`/users/${id}`);
    return response.user;
  },

  async create(userData: CreateUserRequest): Promise<{ user: User }> {
    return await apiClient.post<{ user: User }, CreateUserRequest>(
      "/users",
      userData
    );
  },

  async update(
    id: number,
    userData: UpdateUserRequest
  ): Promise<{ user: User }> {
    logger.debug("üîÑ Updating user", id, "with data:", userData);
    return await apiClient.put<{ user: User }, UpdateUserRequest>(
      `/users/${id}`,
      userData
    );
  },

  async deleteAvatar(userId: number): Promise<void> {
    await apiClient.delete<void>(`/users/${userId}/avatar`);
  },

  async uploadAvatar(
    userId: number,
    file: File
  ): Promise<{ avatar_url: string }> {
    const formData = new FormData();
    formData.append("avatar", file);

    // –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    const token = localStorage.getItem("token");

    logger.debug("üì§ Uploading avatar for user:", userId);
    logger.debug("üîë Token exists:", !!token);

    if (!token) {
      throw new Error("No authentication token found. Please log in again.");
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º baseUrl
    const baseUrl = window.location.origin.includes("localhost")
      ? "http://localhost:8080/api"
      : "/api";

    logger.debug("üåê Upload URL:", `${baseUrl}/users/${userId}/avatar`);

    const response = await fetch(`${baseUrl}/users/${userId}/avatar`, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${token}`,
      },
      body: formData,
    });

    logger.debug("üì• Upload response status:", response.status);

    if (!response.ok) {
      const errorText = await response.text();
      logger.error("‚ùå Upload failed:", errorText);

      let errorMessage = "Failed to upload avatar";
      try {
        const errorJson = JSON.parse(errorText);
        errorMessage = errorJson.error || errorMessage;
      } catch {
        errorMessage = errorText || errorMessage;
      }

      throw new Error(errorMessage);
    }

    const result = await response.json();
    logger.info("‚úÖ Upload successful:", result);
    return result;
  },

  async getOrganizations(): Promise<Organization[]> {
    const response = await apiClient.get<{ organizations: Organization[] }>(
      "/users/organizations"
    );
    return response.organizations || [];
  },
};
