// frontend/src/features/auth/components/ChangePasswordModal/ChangePasswordModal.tsx
import { useState, type FormEvent } from "react";
import { Modal } from "../../../../shared/ui/Modal/Modal";
import { Button } from "../../../../shared/ui/Button/Button";
import { Input } from "../../../../shared/ui/Input/Input";
import { authApi } from "../../../../shared/api/auth.api";

interface ChangePasswordModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSuccess: () => void;
  isFirstLogin?: boolean;
}
export interface ChangePasswordRequest {
  old_password?: string;
  new_password: string;
  confirm_password: string;
}

interface ChangePasswordData {
  old_password?: string;
  new_password: string;
  confirm_password: string;
}

export function ChangePasswordModal({
  isOpen,
  onClose,
  onSuccess,
  isFirstLogin = false,
}: ChangePasswordModalProps) {
  const [formData, setFormData] = useState<ChangePasswordData>({
    old_password: "",
    new_password: "",
    confirm_password: "",
  });

  const [error, setError] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  const validateForm = (): string | null => {
    // –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞ —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ –Ω—É–∂–µ–Ω
    if (!isFirstLogin && !formData.old_password?.trim()) {
      return "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å";
    }

    if (!formData.new_password.trim()) {
      return "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å";
    }

    if (formData.new_password.length < 6) {
      return "–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤";
    }

    if (formData.new_password !== formData.confirm_password) {
      return "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç";
    }

    return null;
  };

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    setError("");

    const validationError = validateForm();
    if (validationError) {
      setError(validationError);
      return;
    }

    setIsLoading(true);

    try {
      const requestData: {
        old_password?: string;
        new_password: string;
        confirm_password: string;
      } = {
        new_password: formData.new_password,
        confirm_password: formData.confirm_password,
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º old_password —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
      if (formData.old_password && formData.old_password.trim()) {
        requestData.old_password = formData.old_password;
      }

      await authApi.changePassword(requestData);

      // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
      setFormData({
        old_password: "",
        new_password: "",
        confirm_password: "",
      });

      // –í—ã–∑—ã–≤–∞–µ–º onSuccess –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
      onSuccess();
    } catch (err: unknown) {
      const errorMessage =
        err &&
        typeof err === "object" &&
        "response" in err &&
        err.response &&
        typeof err.response === "object" &&
        "data" in err.response &&
        err.response.data &&
        typeof err.response.data === "object" &&
        "error" in err.response.data &&
        typeof err.response.data.error === "string"
          ? err.response.data.error
          : "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è";
      setError(errorMessage);
    } finally {
      setIsLoading(false);
    }
  };

  const handleClose = () => {
    if (!isFirstLogin && !isLoading) {
      setFormData({
        old_password: "",
        new_password: "",
        confirm_password: "",
      });
      setError("");
      onClose();
    }
  };

  return (
    <Modal
      isOpen={isOpen}
      onClose={handleClose}
      title={isFirstLogin ? "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—è" : "–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è"}
      size="md"
    >
      <form onSubmit={handleSubmit} className="space-y-6">
        {/* Header Info */}
        <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4">
          <div className="flex items-start gap-3">
            <div className="w-10 h-10 bg-blue-100 dark:bg-blue-900/30 rounded-lg flex items-center justify-center flex-shrink-0">
              <span className="text-2xl">üîí</span>
            </div>
            <div>
              <h3 className="font-semibold text-blue-900 dark:text-blue-100 mb-1">
                {isFirstLogin ? "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!" : "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è"}
              </h3>
              <p className="text-sm text-blue-800 dark:text-blue-200">
                {isFirstLogin
                  ? "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
                  : "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è"}
              </p>
            </div>
          </div>
        </div>

        {/* Error message */}
        {error && (
          <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 text-red-800 dark:text-red-200 px-4 py-3 rounded-lg text-sm">
            {error}
          </div>
        )}

        {/* Old password - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–≤—ã–π –≤—Ö–æ–¥ */}
        {!isFirstLogin && (
          <div className="relative">
            <Input
              label="–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å"
              type="password"
              required
              value={formData.old_password}
              onChange={(e) =>
                setFormData({ ...formData, old_password: e.target.value })
              }
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å"
            />
          </div>
        )}

        {/* New password */}
        <div className="relative">
          <Input
            label="–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
            type="password"
            required
            value={formData.new_password}
            onChange={(e) =>
              setFormData({ ...formData, new_password: e.target.value })
            }
            placeholder="–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"
          />
        </div>

        {/* Confirm password */}
        <div className="relative">
          <Input
            label="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è"
            type="password"
            required
            value={formData.confirm_password}
            onChange={(e) =>
              setFormData({ ...formData, confirm_password: e.target.value })
            }
            placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
          />
        </div>

        {/* Actions */}
        <div className="flex gap-3 justify-end pt-4 border-t border-gray-200 dark:border-zinc-700">
          {!isFirstLogin && (
            <Button
              type="button"
              variant="secondary"
              onClick={handleClose}
              disabled={isLoading}
              className="cursor-pointer"
            >
              –û—Ç–º–µ–Ω–∞
            </Button>
          )}
          <Button
            type="submit"
            disabled={isLoading}
            fullWidth={isFirstLogin}
            className="cursor-pointer"
          >
            {isLoading
              ? "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ..."
              : isFirstLogin
              ? "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å"
              : "–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å"}
          </Button>
        </div>
      </form>
    </Modal>
  );
}
