// frontend/src/features/user/UserViewModal/UserViewModal.tsx
import { Modal } from "../../../shared/ui/Modal/Modal";
import { Button } from "../../../shared/ui/Button/Button";
import { Badge } from "../../../shared/ui/Badge/Badge";
import type { User } from "../../../shared/api/auth.api";
import { getAvatarUrl } from "../../../shared/utils/url";

interface UserViewModalProps {
  isOpen: boolean;
  onClose: () => void;
  user: User | null;
  onEdit: () => void;
  onDelete: () => void;
  currentUserRole: string;
  currentUserId: number;
}

/**
 * –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 * –° –∫–Ω–æ–ø–∫–∞–º–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" –∏ "–£–¥–∞–ª–∏—Ç—å"
 */
export function UserViewModal({
  isOpen,
  onClose,
  user,
  onEdit,
  onDelete,
  currentUserRole,
  currentUserId,
}: UserViewModalProps) {
  if (!user) return null;

  const isAdmin = currentUserRole === "admin";
  const isModerator = currentUserRole === "moderator";
  const isCurrentUser = user.id === currentUserId;

  // –ü—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  const canEdit =
    isCurrentUser || // –°–∞–º —Å–µ–±—è
    isAdmin || // –ê–¥–º–∏–Ω –≤—Å–µ—Ö
    (isModerator && user.role === "user"); // –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —Ç–æ–ª—å–∫–æ user'–æ–≤

  // –ü—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
  const canDelete = isAdmin && !isCurrentUser; // –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω, –Ω–æ –Ω–µ —Å–µ–±—è

  const getRoleBadgeVariant = (role: string) => {
    switch (role) {
      case "admin":
        return "error";
      case "moderator":
        return "warning";
      default:
        return "secondary";
    }
  };

  const formatDate = (dateString?: string) => {
    if (!dateString) return "‚Äî";
    return new Date(dateString).toLocaleString("ru-RU", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  return (
    <Modal
      isOpen={isOpen}
      onClose={onClose}
      title="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"
      size="xl"
    >
      <div className="space-y-6">
        {/* –®–∞–ø–∫–∞ —Å –∞–≤–∞—Ç–∞—Ä–æ–º */}
        <div className="flex items-start gap-6 pb-6 border-b border-gray-200 dark:border-zinc-700">
          <div className="flex-shrink-0">
            {user.avatar_url ? (
              <img
                src={getAvatarUrl(user.avatar_url)}
                alt={user.full_name}
                className="w-24 h-24 rounded-full object-cover"
              />
            ) : (
              <div className="w-24 h-24 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center">
                <span className="text-3xl font-bold text-white">
                  {user.full_name.charAt(0).toUpperCase()}
                </span>
              </div>
            )}
          </div>

          <div className="flex-1 min-w-0">
            <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">
              {user.full_name}
            </h2>
            <p className="text-gray-600 dark:text-gray-400 mb-3">
              @{user.username}
            </p>
            <div className="flex flex-wrap gap-2">
              <Badge variant={getRoleBadgeVariant(user.role)}>
                {user.role === "admin"
                  ? "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
                  : user.role === "moderator"
                  ? "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä"
                  : "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}
              </Badge>
              {user.is_online ? (
                <Badge variant="success">üü¢ Online</Badge>
              ) : (
                <Badge variant="secondary">‚ö™ Offline</Badge>
              )}
              {!user.is_active && (
                <Badge variant="error">üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</Badge>
              )}
              {user.is_first_login && (
                <Badge variant="warning">‚ö†Ô∏è –ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥</Badge>
              )}
            </div>
          </div>
        </div>

        {/* –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div>
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
            –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          </h3>
          <div className="grid grid-cols-2 gap-4">
            <InfoField
              label="Email"
              value={user.emails?.[0] || "‚Äî"}
              icon="üìß"
            />
            <InfoField
              label="–¢–µ–ª–µ—Ñ–æ–Ω"
              value={user.phones?.[0] || "‚Äî"}
              icon="üì±"
            />
            <InfoField
              label="–î–æ–ª–∂–Ω–æ—Å—Ç—å"
              value={user.position || "‚Äî"}
              icon="üíº"
            />
            <InfoField
              label="–û—Ç–¥–µ–ª"
              value={user.department || "‚Äî"}
              icon="üè¢"
            />
          </div>
        </div>

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã */}
        {((user.emails && user.emails.length > 1) ||
          (user.phones && user.phones.length > 1)) && (
          <div>
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
              –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
            </h3>
            <div className="space-y-2">
              {user.emails && user.emails.length > 1 && (
                <div>
                  <span className="text-sm font-medium text-gray-600 dark:text-gray-400">
                    Emails:
                  </span>
                  <div className="flex flex-wrap gap-2 mt-1">
                    {user.emails.slice(1).map((email, idx) => (
                      <Badge key={idx} variant="secondary">
                        {email}
                      </Badge>
                    ))}
                  </div>
                </div>
              )}
              {user.phones && user.phones.length > 1 && (
                <div>
                  <span className="text-sm font-medium text-gray-600 dark:text-gray-400">
                    –¢–µ–ª–µ—Ñ–æ–Ω—ã:
                  </span>
                  <div className="flex flex-wrap gap-2 mt-1">
                    {user.phones.slice(1).map((phone, idx) => (
                      <Badge key={idx} variant="secondary">
                        {phone}
                      </Badge>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        )}

        {/* –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div>
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
            –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          </h3>
          <div className="grid grid-cols-2 gap-4">
            <InfoField
              label="–°–æ–∑–¥–∞–Ω"
              value={formatDate(user.created_at)}
              icon="üìÖ"
            />
            <InfoField
              label="–û–±–Ω–æ–≤–ª–µ–Ω"
              value={formatDate(user.updated_at)}
              icon="üîÑ"
            />
            <InfoField
              label="–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
              value={formatDate(user.last_seen)}
              icon="üëÅÔ∏è"
            />
            {user.blocked_at && (
              <InfoField
                label="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
                value={formatDate(user.blocked_at)}
                icon="üö´"
              />
            )}
          </div>
        </div>

        {/* –ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ */}
        {user.blocked_reason && (
          <div className="p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg">
            <h4 className="text-sm font-semibold text-red-800 dark:text-red-200 mb-1">
              –ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:
            </h4>
            <p className="text-sm text-red-700 dark:text-red-300">
              {user.blocked_reason}
            </p>
          </div>
        )}

        {/* –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π */}
        {user.comment && (
          <div>
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
              –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            </h3>
            <p className="text-gray-700 dark:text-gray-300 whitespace-pre-wrap">
              {user.comment}
            </p>
          </div>
        )}

        {/* –¢–µ–≥–∏ */}
        {user.tags && user.tags.length > 0 && (
          <div>
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
              –¢–µ–≥–∏
            </h3>
            <div className="flex flex-wrap gap-2">
              {user.tags.map((tag, idx) => (
                <Badge key={idx} variant="secondary">
                  üè∑Ô∏è {tag}
                </Badge>
              ))}
            </div>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className="flex justify-between pt-4 border-t border-gray-200 dark:border-zinc-700">
          <div className="flex gap-3">
            {canEdit && (
              <Button onClick={onEdit} className="cursor-pointer">
                ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
              </Button>
            )}
            {canDelete && (
              <Button
                variant="error"
                onClick={onDelete}
                className="cursor-pointer"
              >
                üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
              </Button>
            )}
          </div>
          <Button
            variant="secondary"
            onClick={onClose}
            className="cursor-pointer"
          >
            –ó–∞–∫—Ä—ã—Ç—å
          </Button>
        </div>
      </div>
    </Modal>
  );
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 */
function InfoField({
  label,
  value,
  icon,
}: {
  label: string;
  value: string;
  icon: string;
}) {
  return (
    <div>
      <div className="text-sm font-medium text-gray-600 dark:text-gray-400 mb-1">
        {icon} {label}
      </div>
      <div className="text-gray-900 dark:text-white">{value}</div>
    </div>
  );
}
