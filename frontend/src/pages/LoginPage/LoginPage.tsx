// frontend/src/pages/LoginPage/LoginPage.tsx
import { useState, type FormEvent, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { Button } from "../../shared/ui/Button/Button";
import { Input } from "../../shared/ui/Input/Input";
import { authApi } from "../../shared/api/auth.api";
import { ChangePasswordModal } from "../../features/auth/components/ChangePasswordModal/ChangePasswordModal";

export function LoginPage() {
  const navigate = useNavigate();

  const [formData, setFormData] = useState({
    username: "",
    password: "",
  });

  // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –º–µ–∂–¥—É —Ä–µ–Ω–¥–µ—Ä–∞–º–∏
  const [error, setError] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [showPasswordModal, setShowPasswordModal] = useState(false);

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    setError("");

    if (!formData.username.trim()) {
      setError("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω");
      return;
    }

    setIsLoading(true);

    try {
      const response = await authApi.login(formData);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º require_password_change –∏–∑ –æ—Ç–≤–µ—Ç–∞
      if (response.require_password_change) {
        setShowPasswordModal(true);
        // –¢–æ–∫–µ–Ω –£–ñ–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ authApi.login()
      } else {
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ /home
        navigate("/home", { replace: true });
      }
    } catch (err: unknown) {
      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
      const errorMessage =
        err &&
        typeof err === "object" &&
        "response" in err &&
        err.response &&
        typeof err.response === "object" &&
        "data" in err.response &&
        err.response.data &&
        typeof err.response.data === "object" &&
        "error" in err.response.data &&
        typeof err.response.data.error === "string"
          ? err.response.data.error
          : "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å";

      setError(errorMessage);
    } finally {
      setIsLoading(false);
    }
  };

  // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ /home
  const handlePasswordChangeSuccess = () => {
    setShowPasswordModal(false);
    navigate("/home", { replace: true });
  };

  useEffect(() => {
    if (showPasswordModal) {
      // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è
      const handlePopState = () => {
        window.history.pushState(null, "", window.location.href);
      };
      window.history.pushState(null, "", window.location.href);
      window.addEventListener("popstate", handlePopState);

      return () => {
        window.removeEventListener("popstate", handlePopState);
      };
    }
  }, [showPasswordModal]);

  return (
    <>
      <div className="min-h-screen flex items-center justify-center p-4">
        <div className="w-full max-w-md">
          {/* Header */}
          <div className="text-center mb-8">
            <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-2">
              –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
            </h1>
            <p className="text-gray-600 dark:text-zinc-400">
              –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞
            </p>
          </div>

          {/* Form */}
          <div className="bg-white dark:bg-zinc-800 rounded-2xl shadow-lg border border-gray-200 dark:border-zinc-700 p-8">
            <form onSubmit={handleSubmit} className="space-y-6">
              {/* üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 5: –û—à–∏–±–∫–∞ —Ç–µ–ø–µ—Ä—å –Ω–µ –∏—Å—á–µ–∑–∞–µ—Ç –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ */}
              {error && (
                <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 text-red-800 dark:text-red-200 px-4 py-3 rounded-lg text-sm">
                  {error}
                </div>
              )}

              <Input
                label="–õ–æ–≥–∏–Ω"
                type="text"
                required
                value={formData.username}
                onChange={(e) =>
                  setFormData({ ...formData, username: e.target.value })
                }
                placeholder="–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω"
                autoComplete="username"
              />

              <Input
                label="–ü–∞—Ä–æ–ª—å"
                type="password"
                value={formData.password}
                onChange={(e) =>
                  setFormData({ ...formData, password: e.target.value })
                }
                placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å)"
                autoComplete="current-password"
                helperText="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
              />

              <Button
                type="submit"
                fullWidth
                disabled={isLoading}
                className="cursor-pointer"
              >
                {isLoading ? "–í—Ö–æ–¥..." : "–í–æ–π—Ç–∏"}
              </Button>
            </form>

            <div className="mt-6 pt-6 border-t border-gray-200 dark:border-zinc-700 text-center">
              <p className="text-sm text-gray-600 dark:text-zinc-400">
                –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?{" "}
                <span className="text-gray-400 dark:text-zinc-500">
                  –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                </span>
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* Password Change Modal */}
      <ChangePasswordModal
        isOpen={showPasswordModal}
        onClose={() => {}} // –ó–∞–ø—Ä–µ—â–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ
        onSuccess={handlePasswordChangeSuccess}
        isFirstLogin={true}
      />
    </>
  );
}
