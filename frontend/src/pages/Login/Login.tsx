import React, { useState, FormEvent } from "react";
import { useNavigate } from "react-router-dom";
import { login } from "../../services/api";
import { setToken, setUser } from "../../utils/auth";
import ChangePasswordModal from "../../components/ChangePasswordModal/ChangePasswordModal";
import "./Login.css";

const Login: React.FC = () => {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [showChangePasswordModal, setShowChangePasswordModal] = useState(false);
  const navigate = useNavigate();

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    try {
      const response = await login({ username, password });
      setToken(response.token);
      setUser(response.user);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –º–µ–Ω—è—Ç—å –ø–∞—Ä–æ–ª—å
      if (response.require_password_change) {
        setShowChangePasswordModal(true);
      } else {
        navigate("/home");
      }
    } catch (err) {
      setError("–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
    } finally {
      setLoading(false);
    }
  };

  const handlePasswordChangeSuccess = () => {
    setShowChangePasswordModal(false);
    navigate("/home");
  };

  const handlePasswordChangeClose = () => {
    // –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ –Ω–µ–ª—å–∑—è –∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ª–∏–±–æ —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å, –ª–∏–±–æ –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    setShowChangePasswordModal(false);
    setToken("");
    setUser(null);
    setError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã");
  };

  return (
    <div className="login-page">
      {/* Main Content */}
      <main className="login-main">
        <div className="login-container">
          <div className="login-form-section">
            <div className="form-container">
              <div className="form-header">
                <h1>–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</h1>
              </div>
              <form onSubmit={handleSubmit} className="login-form">
                <div className="input-group">
                  <label htmlFor="username">–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</label>
                  <div className="input-wrapper">
                    <div className="input-icon">
                      <svg
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                        />
                      </svg>
                    </div>
                    <input
                      id="username"
                      type="text"
                      value={username}
                      onChange={(e) => setUsername(e.target.value)}
                      disabled={loading}
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                      required
                    />
                  </div>
                </div>

                <div className="input-group">
                  <label htmlFor="password">–ü–∞—Ä–æ–ª—å</label>
                  <div className="input-wrapper">
                    <div className="input-icon">
                      <svg
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"
                        />
                      </svg>
                    </div>
                    <input
                      id="password"
                      type={showPassword ? "text" : "password"}
                      value={password}
                      onChange={(e) => setPassword(e.target.value)}
                      disabled={loading}
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º)"
                    />
                    <button
                      type="button"
                      className="password-toggle"
                      onClick={() => setShowPassword(!showPassword)}
                      tabIndex={-1}
                    >
                      {showPassword ? (
                        <svg
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth={2}
                            d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21"
                          />
                        </svg>
                      ) : (
                        <svg
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth={2}
                            d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                          />
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth={2}
                            d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
                          />
                        </svg>
                      )}
                    </button>
                  </div>
                  <span className="field-hint">
                    –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–∞—Ä–æ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º
                  </span>
                </div>

                {error && (
                  <div className="error-message">
                    <div className="error-icon">
                      <svg
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                        />
                      </svg>
                    </div>
                    <span>{error}</span>
                  </div>
                )}

                <button
                  type="submit"
                  disabled={loading || !username.trim()}
                  className="submit-button"
                >
                  {loading ? (
                    <>
                      <div className="loading-spinner"></div>
                      <span>–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ö–æ–¥...</span>
                    </>
                  ) : (
                    <>
                      <span>–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É</span>
                      <svg
                        className="submit-arrow"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M13 7l5 5m0 0l-5 5m5-5H6"
                        />
                      </svg>
                    </>
                  )}
                </button>
              </form>

              <div className="form-footer">
                <div className="security-note">
                  <div className="security-icon">üîí</div>
                  <span>
                    –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã –∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –ø–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º—É
                    —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—é
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>

      {/* Change Password Modal */}
      {showChangePasswordModal && (
        <ChangePasswordModal
          onSuccess={handlePasswordChangeSuccess}
          onClose={handlePasswordChangeClose}
          isFirstLogin={true}
        />
      )}

      {/* Footer */}
      <footer className="login-footer">
        <div className="footer-content">
          <div className="footer-info">
            <span>¬© 2025 –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏</span>
            <span className="footer-separator">‚Ä¢</span>
            <span>–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞</span>
          </div>
          <div className="system-status">
            <div className="status-indicator"></div>
            <span>–°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞</span>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default Login;
